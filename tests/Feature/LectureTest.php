<?php
namespace Tests\Feature;

use App\Models\Lecture;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class LectureTest extends TestCase
{
    use RefreshDatabase;

    protected $user;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create();
    }

    public function test_fetch_all_lectures_endpoint()
    {
        $this
            ->actingAs($this->user, 'api')
            ->getJson('api/lectures')
            ->assertOk();
    }

    public function test_store_lecture_endpoint()
    {
        $this->actingAs($this->user, 'api');
        $formData = ['name' => 'Test Lecture'];
        $response = ['status' => 200, 'message' => 'Created successfully'];
        $this->json('POST', url('api/lectures'), $formData)->assertJson($response)->assertStatus(200);
    }

    public function test_update_lecture_endpoint()
    {
        $this->actingAs($this->user, 'api');
        $lecture = Lecture::factory()->create();
        $formData = ['name' => 'Test Lecture Updated'];
        $response = ['status' => 200, 'message' => 'Updated successfully'];
        $this->json('PUT', url('api/lectures/' . $lecture->id), $formData)->assertJson($response)->assertStatus(200);
    }

    public function test_destroy_lecture_endpoint()
    {
        $this->actingAs($this->user, 'api');
        $lecture = Lecture::factory()->create();
        $this->json('DELETE', url('api/lectures/' . $lecture->id))->assertStatus(200);
    }

    public function test_attach_user_endpoint()
    {
        $this->actingAs($this->user, 'api');
        $lecture = Lecture::factory()->create();
        $formData = ['user_id' => $this->user->id];
        $response = ['status' => 200, 'message' => 'Attached successfully'];
        $this->json('POST', url('api/lectures/' . $lecture->id . '/attach-user'), $formData)->assertJson(
            $response
        )->assertStatus(200);
    }
}
