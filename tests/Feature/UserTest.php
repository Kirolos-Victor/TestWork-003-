<?php
namespace Tests\Feature;

use App\Models\Lecture;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class UserTest extends TestCase
{
    use RefreshDatabase;

    protected $user;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create();
    }

    public function test_fetch_all_users_endpoint()
    {
        $this
            ->actingAs($this->user, 'api')
            ->getJson('api/users')
            ->assertOk();
    }

    public function test_store_user_endpoint()
    {
        $this->actingAs($this->user, 'api');
        $formData = ['name' => 'kirolos', 'email' => 'test123@test.com', 'password' => 'password'];
        $response = ['status' => 200, 'message' => 'Created successfully'];
        $this->json('POST', url('api/users'), $formData)->assertJson($response)->assertStatus(200);
    }

    public function test_update_user_endpoint()
    {
        $this->actingAs($this->user, 'api');
        $user = User::factory()->create();
        $formData = ['name' => 'kirolos', 'email' => 'test123@test.com', 'password' => 'password'];
        $response = ['status' => 200, 'message' => 'Updated successfully'];
        $this->json('PUT', url('api/users/' . $user->id), $formData)->assertJson($response)->assertStatus(200);
    }

    public function test_destroy_user_endpoint()
    {
        $this->actingAs($this->user, 'api');
        $user = User::factory()->create();
        $this->json('DELETE', url('api/users/' . $user->id))->assertStatus(200);
    }

    public function test_attach_lecture_endpoint()
    {
        $this->actingAs($this->user, 'api');
        $user = User::factory()->create();
        $lecture = Lecture::factory()->create();
        $formData = ['lecture_id' => $lecture->id];
        $response = ['status' => 200, 'message' => 'Attached successfully'];
        $this->json('POST', url('api/users/' . $user->id . '/attach-lecture'), $formData)->assertJson(
            $response
        )->assertStatus(200);
    }
}
